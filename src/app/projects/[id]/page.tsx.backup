"use client";

import { useEffect, useState } from "react";
import { useParams, useRouter, useSearchParams } from "next/navigation";
import Image from "next/image";
import { useAuth } from "@/hooks/useAuth";
import DashboardLayout from "@/components/layout/DashboardLayout";
import AuthWrapper from "@/components/auth/AuthWrapper";
import { Project, Feedback, UserRole } from "@/types";
import { ProjectWorkflowManager } from "@/lib/projectWorkflow";
import { FeedbackVersionManager } from "@/lib/feedbackVersionManager";
import ModificationRequestManager from "@/components/feedback/ModificationRequestManager";
import FeedbackVersionHistory from "@/components/feedback/FeedbackVersionHistory";
import FileUpload, { UploadedFile } from "@/components/ui/FileUpload";
import { addNotification } from "@/lib/notifications";
import VersionManagerComponent from "@/components/versions/VersionManager";
import CurrentVersionPreview from "@/components/versions/CurrentVersionPreview";
import ModificationCountDisplay from "@/components/modification/ModificationCountDisplay";
import EnhancedVersionUpload from "@/components/versions/EnhancedVersionUpload";
import EnhancedVersionGallery from "@/components/versions/EnhancedVersionGallery";
import EnhancedMarkupCanvas from "@/components/markup/EnhancedMarkupCanvas";
import { initializeMockVersionData } from "@/lib/mockVersionData";
import dynamic from "next/dynamic";

// 동적 임포트로 MarkupFeedbackSystem 로드 (SSR 비활성화)
const DynamicMarkupFeedbackSystem = dynamic(
  () => import("@/components/markup/MarkupFeedbackSystem"),
  {
    ssr: false,
    loading: () => (
      <div className="flex items-center justify-center py-12">
        <div className="text-center">
          <div className="loading loading-spinner loading-lg text-primary mb-4"></div>
          <div className="text-base-content/70">마크업 시스템을 불러오는 중...</div>
        </div>
      </div>
    ),
  }
);
import { VersionManager } from "@/lib/versionManager";

const MOCK_PROJECT: Project = {
  id: "1",
  name: "로고 디자인 프로젝트",
  description: "브랜드 아이덴티티를 위한 로고 디자인 및 가이드라인 제작",
  status: "feedback_period",
  client_id: "1",
  designer_id: "2",
  start_date: "2024-01-15",
  end_date: "2024-02-15",
  draft_deadline: "2024-01-25",
  first_review_deadline: "2024-02-05",
  final_review_deadline: "2024-02-12",
  estimated_price: 2500000,
  budget_used: 1850000,
  total_modification_count: 3,
  remaining_modification_count: 1,
  additional_modification_fee: 50000,
  modification_history: [],
  requirements: "모던하고 미니멀한 스타일의 로고를 원합니다.",
  created_at: "2024-01-15T09:00:00Z",
  updated_at: "2024-01-20T14:30:00Z",
};

const MOCK_FEEDBACKS: Feedback[] = [
  {
    id: "feedback-1",
    project_id: "1",
    report_id: "report-1",
    content: "로고의 색상을 좀 더 밝게 조정해주세요. 현재는 너무 어둡습니다.",
    content_html:
      "<p>로고의 색상을 좀 더 <strong>밝게 조정</strong>해주세요. 현재는 너무 어둡습니다.</p>",
    priority: "high",
    category: "design",
    status: "pending",
    is_official: true,
    submitted_at: "2024-01-22T10:30:00Z",
    updated_at: "2024-01-22T10:30:00Z",
    client_id: "1",
    version: 1,
    revision_request_count: 0,
  },
  {
    id: "feedback-2",
    project_id: "1",
    report_id: "report-1",
    content: "폰트가 너무 두꺼워 보입니다.",
    content_html:
      "<p>폰트가 너무 <em>두꺼워</em> 보입니다. 좀 더 세련된 느낌으로 수정 가능할까요?</p>",
    priority: "medium",
    category: "design",
    status: "acknowledged",
    is_official: false,
    submitted_at: "2024-01-22T11:00:00Z",
    updated_at: "2024-01-22T11:15:00Z",
    client_id: "1",
    version: 1,
    revision_request_count: 0,
  },
];

export default function EnhancedProjectDetailPage() {
  const params = useParams();
  const router = useRouter();
  const searchParams = useSearchParams();
  const { user } = useAuth();

  const projectId = params?.id as string;
  const userRole: UserRole = user?.role ?? user?.userType ?? "client";

  const [project, setProject] = useState<Project>(MOCK_PROJECT);
  const [feedbacks, setFeedbacks] = useState<Feedback[]>(MOCK_FEEDBACKS);
  const [activeTab, setActiveTab] = useState<string>(
    searchParams.get("tab") || "overview"
  );
  
  // 파일 업로드 상태
  const [uploadingStage, setUploadingStage] = useState<string | null>(null);
  const [draftFiles, setDraftFiles] = useState<File[]>([]);
  const [intermediateFiles, setIntermediateFiles] = useState<File[]>([]);
  const [finalFiles, setFinalFiles] = useState<File[]>([]);
  
  // 갤러리 뷰 상태
  const [showAllDrafts, setShowAllDrafts] = useState(false);
  const [showAllIntermediate, setShowAllIntermediate] = useState(false);
  
  // 모달 상태
  const [selectedImage, setSelectedImage] = useState<{
    src: string;
    alt: string;
    title?: string;
    description?: string;
  } | null>(null);
  
  // 파일 필터링 상태
  const [fileSearchTerm, setFileSearchTerm] = useState('');
  const [selectedFileCategory, setSelectedFileCategory] = useState('all');
  const [fileSortBy, setFileSortBy] = useState('date'); // date, name, size
  
  // 업로드 메타데이터 상태
  const [uploadMetadata, setUploadMetadata] = useState<{
    [stage: string]: {
      title: string;
      description: string;
      fileType: string;
    }
  }>({
    draft: { title: '', description: '', fileType: 'general' },
    intermediate: { title: '', description: '', fileType: 'general' },
    final: { title: '', description: '', fileType: 'general' },
  });
  // 모의 디자인 초안 파일들 (많은 파일 시나리오)
  const mockDraftFiles = Array.from({ length: 15 }, (_, i) => ({
    id: `draft-${i + 1}`,
    name: `logo_design_v${i + 1}.png`,
    preview: `https://picsum.photos/400/300?random=${i + 10}`,
    uploadDate: new Date(2024, 0, 15 + i).toLocaleDateString(),
    size: Math.floor(Math.random() * 5000) + 1000 // KB
  }));

  const mockIntermediateFiles = Array.from({ length: 25 }, (_, i) => ({
    id: `intermediate-${i + 1}`,
    name: i < 8 ? `business_card_v${i + 1}.png` : 
          i < 16 ? `letterhead_v${i - 7}.pdf` : 
          `brochure_v${i - 15}.png`,
    preview: i < 16 ? `https://picsum.photos/400/300?random=${i + 50}` : null,
    uploadDate: new Date(2024, 0, 25 + i).toLocaleDateString(),
    size: Math.floor(Math.random() * 8000) + 2000,
    type: i < 8 ? '명함' : i < 16 ? '레터헤드' : '브로셔'
  }));

  // 모의 프로젝트 파일들 (실제 업로드된 파일들을 시뮬레이션)
  const mockProjectFiles: UploadedFile[] = [
    {
      id: "file-1",
      file: new File(["mock"], "logo_design_v1.png", { type: "image/png" }),
      name: "logo_design_v1.png",
      size: 2456789,
      type: "image/png",
      preview: "https://picsum.photos/400/300?random=1",
      uploadProgress: 100,
      uploadStatus: "completed" as const,
      url: "#"
    },
    {
      id: "file-2",
      file: new File(["mock"], "logo_design_v2.png", { type: "image/png" }),
      name: "logo_design_v2.png",
      size: 2789123,
      type: "image/png",
      preview: "https://picsum.photos/400/300?random=2",
      uploadProgress: 100,
      uploadStatus: "completed" as const,
      url: "#"
    },
    {
      id: "file-3",
      file: new File(["mock"], "brand_guideline.pdf", { type: "application/pdf" }),
      name: "brand_guideline.pdf",
      size: 5234567,
      type: "application/pdf",
      uploadProgress: 100,
      uploadStatus: "completed" as const,
      url: "#"
    },
    {
      id: "file-4",
      file: new File(["mock"], "intermediate_report.pdf", { type: "application/pdf" }),
      name: "intermediate_report.pdf",
      size: 3456789,
      type: "application/pdf",
      uploadProgress: 100,
      uploadStatus: "completed" as const,
      url: "#"
    },
    {
      id: "file-5",
      file: new File(["mock"], "final_deliverables.zip", { type: "application/zip" }),
      name: "final_deliverables.zip",
      size: 12456789,
      type: "application/zip",
      uploadProgress: 100,
      uploadStatus: "completed" as const,
      url: "#"
    }
  ];

  const [projectFiles, setProjectFiles] = useState<UploadedFile[]>(mockProjectFiles);

  // 파일 필터링 및 정렬 로직
  const getFilteredAndSortedFiles = () => {
    let filtered = projectFiles;

    // 검색어 필터링
    if (fileSearchTerm) {
      filtered = filtered.filter(file => 
        file.name.toLowerCase().includes(fileSearchTerm.toLowerCase())
      );
    }

    // 카테고리 필터링
    if (selectedFileCategory !== 'all') {
      filtered = filtered.filter(file => {
        const getFileCategory = (name: string) => {
          if (name.includes('logo_design')) return 'draft';
          if (name.includes('intermediate')) return 'intermediate';
          if (name.includes('guideline') || name.includes('deliverables')) return 'final';
          return 'other';
        };
        return getFileCategory(file.name) === selectedFileCategory;
      });
    }

    // 정렬
    filtered.sort((a, b) => {
      switch (fileSortBy) {
        case 'name':
          return a.name.localeCompare(b.name);
        case 'size':
          return b.size - a.size;
        case 'date':
        default:
          return 0; // 모의 데이터이므로 날짜 정렬은 기본 순서 유지
      }
    });

    return filtered;
  };

  // 피드백 히스토리 초기화
  useEffect(() => {
    feedbacks.forEach((feedback) => {
      if (!FeedbackVersionManager.getFeedbackHistory(feedback.id)) {
        FeedbackVersionManager.createFeedback(feedback);
      }
    });
  }, [feedbacks]);

  // 시안 버전 Mock 데이터 초기화
  useEffect(() => {
    if (projectId) {
      // 개발 중에는 항상 최신 Mock 데이터로 새로고침
      initializeMockVersionData(projectId, true);
    }
  }, [projectId]);


  const availableActions = ProjectWorkflowManager.getAvailableActions(
    project.status,
    userRole
  );
  const statusInfo = ProjectWorkflowManager.getStatusDisplayInfo(
    project.status
  );
  const progress = ProjectWorkflowManager.calculateProgress(project.status, {
    milestonesCompleted: 2,
    totalMilestones: 4,
    feedbackRounds: feedbacks.filter((f) => f.status === "resolved").length,
  });

  const handleStatusChange = async (actionId: string) => {
    // 워크플로우 액션 처리
    const transition = ProjectWorkflowManager.getAvailableTransitions(
      project.status,
      userRole
    ).find((t) => actionId.includes(t.to));

    if (!transition) return;

    const validation = ProjectWorkflowManager.validateTransition(
      project.status,
      transition.to,
      userRole,
      {
        hasDraftFiles: true, // Mock data
        hasFinalDeliverables: actionId === "request_completion",
        hasFeedback: feedbacks.length > 0,
        remainingModifications: project.remaining_modification_count,
      }
    );

    if (!validation.valid) {
      alert(validation.errors.join("\n"));
      return;
    }

    if (transition.requiresConfirmation) {
      const confirmed = confirm(
        `${transition.description}\n\n계속 진행하시겠습니까?`
      );
      if (!confirmed) return;
    }

    // 상태 업데이트
    setProject((prev) => ({
      ...prev,
      status: transition.to,
      updated_at: new Date().toISOString(),
    }));

    // 알림 추가
    addNotification({
      message: `프로젝트가 "${
        ProjectWorkflowManager.getStatusDisplayInfo(transition.to).label
      }" 상태로 변경되었습니다.`,
      user_id: user?.id || "",
      url: `/projects/${projectId}`,
    });
  };

  const handleFeedbackSubmit = (
    feedbackData: Omit<
      Feedback,
      "id" | "submitted_at" | "updated_at" | "version"
    >
  ) => {
    const newFeedback: Feedback = {
      ...feedbackData,
      id: Date.now().toString(),
      submitted_at: new Date().toISOString(),
      updated_at: new Date().toISOString(),
      version: 1,
    };

    setFeedbacks((prev) => [...prev, newFeedback]);
    FeedbackVersionManager.createFeedback(newFeedback);

    addNotification({
      message: "새로운 피드백이 제출되었습니다.",
      user_id: user?.id || "",
      url: `/projects/${projectId}?tab=feedback`,
    });
  };


  const handleFeedbackStatusChange = (
    feedbackId: string,
    status: Feedback["status"]
  ) => {
    const updatedFeedbacks = feedbacks.map((f) =>
      f.id === feedbackId
        ? { ...f, status, updated_at: new Date().toISOString() }
        : f
    );

    setFeedbacks(updatedFeedbacks);

    FeedbackVersionManager.updateFeedback(
      feedbackId,
      { status },
      user?.id || ""
    );
  };

  const handleFilesUpload = (newFiles: UploadedFile[]) => {
    setProjectFiles((prev) => [...prev, ...newFiles]);
    addNotification({
      message: `${newFiles.length}개의 파일이 업로드되었습니다.`,
      user_id: user?.id || "",
      url: `/projects/${projectId}?tab=files`,
    });
  };

  const handleFileRemove = (fileId: string) => {
    setProjectFiles((prev) => prev.filter((f) => f.id !== fileId));
  };

  // 파일 다운로드 (모의 구현)
  const handleFileDownload = (file: UploadedFile | { name: string; [key: string]: unknown }) => {
    // 실제 구현에서는 서버에서 파일을 다운로드
    console.log('파일 다운로드:', file.name);
    addNotification({
      message: `${file.name} 다운로드를 시작합니다.`,
      user_id: user?.id || "",
      url: `/projects/${projectId}?tab=files`,
    });
  };

  // 파일 공유 링크 생성 (모의 구현)
  const handleFileShare = (file: UploadedFile | { id: string; name: string; [key: string]: unknown }) => {
    const shareLink = `${window.location.origin}/projects/${projectId}/files/${file.id}`;
    navigator.clipboard.writeText(shareLink);
    addNotification({
      message: `${file.name}의 공유 링크가 복사되었습니다.`,
      user_id: user?.id || "",
      url: `/projects/${projectId}?tab=files`,
    });
  };

  // 파일 선택 핸들러
  const handleFileSelect = (stage: string) => (event: React.ChangeEvent<HTMLInputElement>) => {
    const files = event.target.files;
    if (files) {
      const fileArray = Array.from(files);
      switch (stage) {
        case 'draft':
          setDraftFiles(fileArray);
          break;
        case 'intermediate':
          setIntermediateFiles(fileArray);
          break;
        case 'final':
          setFinalFiles(fileArray);
          break;
      }
      
      // 파일 선택 후 업로드 상태 표시
      setUploadingStage(stage);
      console.log(`${stage} 파일 선택됨:`, fileArray);
    }
  };

  // 파일 업로드 핸들러
  const handleUpload = async (stage: string, title?: string, description?: string, fileType?: string) => {
    let files: File[] = [];
    switch (stage) {
      case 'draft':
        files = draftFiles;
        break;
      case 'intermediate':
        files = intermediateFiles;
        break;
      case 'final':
        files = finalFiles;
        break;
    }

    if (files.length === 0) {
      alert('먼저 파일을 선택해주세요.');
      return;
    }

    // 업로드 시뮬레이션
    setUploadingStage(stage);
    console.log(`${stage} 파일 업로드 중:`, files);
    
    // 실제로는 서버 API 호출
    try {
      // 업로드된 파일들을 projectFiles에 추가 (모의 구현)
      const newUploadedFiles: UploadedFile[] = files.map((file, index) => {
        const isImage = file.type.startsWith('image/');
        return {
          id: `uploaded-${Date.now()}-${index}`,
          file: file,
          name: file.name,
          size: file.size,
          type: file.type,
          preview: isImage ? URL.createObjectURL(file) : undefined,
          uploadProgress: 100,
          uploadStatus: "completed" as const,
          url: "#",
          metadata: {
            title: title || file.name,
            description: description || `${stage} 단계 파일`,
            fileType: fileType || 'general',
            uploadedAt: new Date().toISOString()
          }
        };
      });

      // 2초 후 파일을 목록에 추가
      setTimeout(() => {
        setProjectFiles((prev) => [...prev, ...newUploadedFiles]);
        setUploadingStage(null);
        
        // 업로드 완료 후 파일 선택 초기화
        switch (stage) {
          case 'draft':
            setDraftFiles([]);
            break;
          case 'intermediate':
            setIntermediateFiles([]);
            break;
          case 'final':
            setFinalFiles([]);
            break;
        }
        
        addNotification({
          message: `${files.length}개의 ${stage === 'draft' ? '디자인 초안' : stage === 'intermediate' ? '중간 작업물' : '최종 결과물'}이 업로드되었습니다.`,
          user_id: user?.id || "",
          url: `/projects/${projectId}?tab=files`,
        });
      }, 2000);
    } catch {
      setUploadingStage(null);
      alert('업로드 중 오류가 발생했습니다. 다시 시도해주세요.');
    }
  };

  const renderTabContent = () => {
    switch (activeTab) {
      case "overview":
        return (
          <div className="space-y-6">
            {/* 수정 횟수 현황 */}
            <ModificationCountDisplay 
              projectId={projectId}
              onLimitExceeded={() => {
                addNotification({
                  message: "⚠️ 수정 횟수를 모두 사용했습니다. 추가 수정은 별도 비용이 발생합니다.",
                  user_id: user?.id || "",
                  url: `/projects/${projectId}`,
                });
              }}
              onWarning={() => {
                addNotification({
                  message: "🔔 수정 횟수가 부족합니다. 신중하게 사용해주세요.",
                  user_id: user?.id || "",
                  url: `/projects/${projectId}`,
                });
              }}
            />
            
            {/* 프로젝트 기본 정보 */}
            <div className="card bg-base-100 shadow-sm">
              <div className="card-body">
                <h3 className="text-lg font-semibold mb-4">프로젝트 정보</h3>
                <div className="grid grid-cols-1 md:grid-cols-2 gap-6">
                  <div>
                    <h4 className="font-medium mb-2">기본 정보</h4>
                    <div className="space-y-2 text-sm">
                      <div className="flex justify-between">
                        <span>프로젝트명:</span>
                        <span className="font-medium">{project.name}</span>
                      </div>
                      <div className="flex justify-between">
                        <span>예상 금액:</span>
                        <span className="font-medium">
                          {project.estimated_price.toLocaleString()}원
                        </span>
                      </div>
                      <div className="flex justify-between">
                        <span>수정 횟수:</span>
                        <span
                          className={`font-medium ${
                            project.remaining_modification_count === 0
                              ? "text-error"
                              : "text-success"
                          }`}
                        >
                          {project.remaining_modification_count}/
                          {project.total_modification_count}
                        </span>
                      </div>
                      <div className="flex justify-between">
                        <span>추가 수정 요금:</span>
                        <span className="font-medium text-warning">
                          {project.additional_modification_fee.toLocaleString()}원/회
                        </span>
                      </div>
                    </div>
                  </div>

                  <div>
                    <h4 className="font-medium mb-2">일정</h4>
                    <div className="space-y-2 text-sm">
                      <div className="flex justify-between">
                        <span>시작일:</span>
                        <span>
                          {new Date(project.start_date).toLocaleDateString()}
                        </span>
                      </div>
                      <div className="flex justify-between">
                        <span>마감일:</span>
                        <span>
                          {new Date(project.end_date).toLocaleDateString()}
                        </span>
                      </div>
                      <div className="flex justify-between">
                        <span>초안 마감:</span>
                        <span>
                          {new Date(
                            project.draft_deadline
                          ).toLocaleDateString()}
                        </span>
                      </div>
                    </div>
                  </div>
                </div>

                <div className="mt-6">
                  <h4 className="font-medium mb-2">요구사항</h4>
                  <p className="text-sm text-base-content/80 bg-base-200 p-3 rounded">
                    {project.requirements}
                  </p>
                </div>
              </div>
            </div>

            <div className="card bg-base-100 shadow-sm">
              <div className="card-body">
                <div className="flex items-center justify-between mb-4">
                  <h3 className="text-lg font-semibold">진행 현황</h3>
                  <span className="badge badge-primary badge-lg">
                    {statusInfo.icon} {statusInfo.label}
                  </span>
                </div>

                <div className="mb-4">
                  <div className="flex justify-between text-sm mb-2">
                    <span>전체 진행률</span>
                    <span className="font-medium">{progress}%</span>
                  </div>
                  <progress
                    className={`progress progress-${
                      statusInfo.color === "success" ? "success" : "primary"
                    } w-full`}
                    value={progress}
                    max="100"
                  />
                </div>

                <p className="text-sm text-base-content/70">
                  {statusInfo.description}
                </p>
              </div>
            </div>

            <CurrentVersionPreview 
              projectId={projectId}
              onViewVersions={() => setActiveTab("versions")}
            />

            {availableActions.length > 0 && (
              <div className="card bg-base-100 shadow-sm">
                <div className="card-body">
                  <h3 className="text-lg font-semibold mb-4">가능한 작업</h3>
                  <div className="flex flex-wrap gap-2">
                    {availableActions.map((action) => (
                      <button
                        key={action.id}
                        onClick={() => handleStatusChange(action.id)}
                        className={`btn btn-${action.variant}`}
                      >
                        {action.icon} {action.label}
                      </button>
                    ))}
                  </div>
                </div>
              </div>
            )}
          </div>
        );

      case "feedback":
        const currentVersion = VersionManager.getCurrentVersion(projectId);
        
        return (
          <div className="space-y-8">
            {/* 개선된 마크업 피드백 시스템 */}
            {currentVersion && (
              <EnhancedMarkupCanvas
                version={currentVersion}
                projectId={projectId}
                userRole={userRole}
                currentUserId={user?.id || "current-user"}
                onFeedbackCreate={(feedback) => {
                  addNotification({
                    message: `새로운 피드백 '${feedback.title}'이 등록되었습니다.`,
                    user_id: user?.id || "",
                    url: `/projects/${projectId}?tab=feedback`,
                  });
                }}
                onFeedbackUpdate={(feedback) => {
                  addNotification({
                    message: `피드백 '${feedback.title}'이 업데이트되었습니다.`,
                    user_id: user?.id || "",
                    url: `/projects/${projectId}?tab=feedback`,
                  });
                }}
                onMarkupDelete={(markup) => {
                  addNotification({
                    message: `마크업 #${markup.number}이 삭제되었습니다.`,
                    user_id: user?.id || "",
                    url: `/projects/${projectId}?tab=feedback`,
                  });
                }}
              />
            )}

            {/* 구분선 */}
            <div className="divider">
              <span className="text-base-content/60">기존 피드백 시스템</span>
            </div>

            {/* 기존 수정요청 관리 시스템 */}
            <ModificationRequestManager
              projectId={projectId}
              reportId="report-1"
              isDesigner={userRole === "designer"}
              onModificationRequestSubmit={(data) => {
                // 수정요청이 제출되었을 때의 처리
                console.log("New modification request submitted:", data);
                
                addNotification({
                  message: "새로운 수정요청이 제출되었습니다.",
                  user_id: user?.id || "",
                  url: `/projects/${projectId}?tab=feedback`,
                });
              }}
            />
          </div>
        );

      case "versions":
        return (
          <div className="space-y-8">
            {/* 새 시안 업로드 (디자이너만) */}
            {userRole === "designer" && (
              <EnhancedVersionUpload
                projectId={projectId}
                currentUserId={user?.id || ""}
                onVersionCreated={(version) => {
                  addNotification({
                    message: `시안 v${version.version_number} '${version.title}'이 업로드되었습니다.`,
                    user_id: user?.id || "",
                    url: `/projects/${projectId}?tab=versions`,
                  });
                }}
                onError={(error) => {
                  addNotification({
                    message: `업로드 오류: ${error}`,
                    user_id: user?.id || "",
                    url: `/projects/${projectId}?tab=versions`,
                  });
                }}
              />
            )}
            
            {/* 개선된 시안 갤러리 */}
            <EnhancedVersionGallery
              projectId={projectId}
              userRole={userRole}
              currentUserId={user?.id || ""}
              onVersionSelect={(version) => {
                // 시안 상세보기
                addNotification({
                  message: `시안 v${version.version_number}을 확인 중입니다.`,
                  user_id: user?.id || "",
                  url: `/projects/${projectId}?tab=versions`,
                });
              }}
              onVersionApprove={(version) => {
                addNotification({
                  message: `시안 v${version.version_number}이 승인되었습니다.`,
                  user_id: user?.id || "",
                  url: `/projects/${projectId}?tab=versions`,
                });
              }}
              onVersionDelete={(version) => {
                addNotification({
                  message: `시안 v${version.version_number}이 삭제되었습니다.`,
                  user_id: user?.id || "",
                  url: `/projects/${projectId}?tab=versions`,
                });
              }}
              onVersionCompare={(versionA, versionB) => {
                addNotification({
                  message: `시안 v${versionA.version_number}과 v${versionB.version_number}를 비교 중입니다.`,
                  user_id: user?.id || "",
                  url: `/projects/${projectId}?tab=versions`,
                });
              }}
            />
          </div>
        );

      case "files":
        return (
          <div className="space-y-6">
            <div className="flex items-center justify-between">
              <h3 className="text-lg font-semibold">파일 및 자료</h3>
              <div className="text-sm text-base-content/60">
                {fileSearchTerm || selectedFileCategory !== 'all' 
                  ? `검색 결과: ${getFilteredAndSortedFiles().length}개 (전체 ${projectFiles.length}개)`
                  : `총 ${projectFiles.length}개 파일`
                }
              </div>
            </div>

            {/* 파일 검색 및 필터 */}
            <div className="card bg-base-100 shadow-sm mb-6">
              <div className="card-body py-4">
                <div className="flex flex-col md:flex-row gap-4 items-center">
                  <div className="flex-1">
                    <input
                      type="text"
                      placeholder="파일명으로 검색..."
                      className="input input-bordered input-sm w-full"
                      value={fileSearchTerm}
                      onChange={(e) => setFileSearchTerm(e.target.value)}
                    />
                  </div>
                  <div className="flex space-x-2">
                    <select 
                      className="select select-bordered select-sm"
                      value={selectedFileCategory}
                      onChange={(e) => setSelectedFileCategory(e.target.value)}
                    >
                      <option value="all">전체 파일</option>
                      <option value="draft">디자인 초안</option>
                      <option value="intermediate">중간 작업물</option>
                      <option value="final">최종 결과물</option>
                    </select>
                    <select 
                      className="select select-bordered select-sm"
                      value={fileSortBy}
                      onChange={(e) => setFileSortBy(e.target.value)}
                    >
                      <option value="date">날짜순</option>
                      <option value="name">이름순</option>
                      <option value="size">크기순</option>
                    </select>
                  </div>
                </div>
              </div>
            </div>

            {/* 작업 진행 단계별 이미지 갤러리 */}
            <div className="space-y-8 mb-8">
              <h3 className="text-xl font-bold flex items-center space-x-2">
                <span>🎯</span>
                <span>작업 진행 상황</span>
              </h3>
              
              {/* 1단계: 디자인 초안 */}
              <div className="card bg-gradient-to-r from-primary/5 to-primary/10 shadow-sm">
                <div className="card-body">
                  <div className="flex items-center space-x-3 mb-6">
                    <div className="w-8 h-8 bg-primary text-primary-content rounded-full flex items-center justify-center font-bold">1</div>
                    <div>
                      <h4 className="text-lg font-semibold">디자인 초안</h4>
                      <p className="text-sm text-base-content/70">2024.01.20 - 2024.01.23</p>
                    </div>
                    <div className="badge badge-primary">완료</div>
                  </div>
                  
                  {/* 파일 갤러리 */}
                  <div className="space-y-4">
                    <div className="flex items-center justify-between">
                      <span className="text-sm font-medium">업로드된 초안: {mockDraftFiles.length}개</span>
                      <button 
                        className="btn btn-ghost btn-xs"
                        onClick={() => setShowAllDrafts(!showAllDrafts)}
                      >
                        {showAllDrafts ? '접기' : '전체보기'} 
                        <span className="ml-1">{showAllDrafts ? '▲' : '▼'}</span>
                      </button>
                    </div>
                    
                    <div className={`grid ${showAllDrafts ? 'grid-cols-2 md:grid-cols-3 lg:grid-cols-4' : 'grid-cols-2 md:grid-cols-4'} gap-3`}>
                      {(showAllDrafts ? mockDraftFiles : mockDraftFiles.slice(0, 4)).map((file, index) => (
                        <div key={file.id} className="bg-base-100 p-3 rounded-lg hover:shadow-md transition-shadow">
                          <div className="relative">
                            <Image 
                              src={file.preview} 
                              alt={file.name}
                              width={200}
                              height={showAllDrafts ? 96 : 128}
                              className={`w-full ${showAllDrafts ? 'h-24' : 'h-32'} object-cover rounded cursor-pointer`}
                              onClick={() => setSelectedImage({
                                src: file.preview,
                                alt: file.name,
                                title: file.name,
                                description: `업로드일: ${file.uploadDate}, 크기: ${file.size}KB`
                              })}
                            />
                            <div className="absolute top-1 right-1 bg-black/50 text-white text-xs px-1 rounded">
                              V{index + 1}
                            </div>
                          </div>
                          <div className="mt-2">
                            <p className="text-xs font-medium truncate" title={file.name}>
                              {file.name}
                            </p>
                            <div className="flex items-center justify-between mt-1">
                              <span className="text-xs text-base-content/60">{file.uploadDate}</span>
                              <span className="text-xs text-base-content/60">{file.size}KB</span>
                            </div>
                          </div>
                        </div>
                      ))}
                    </div>
                    
                    {!showAllDrafts && mockDraftFiles.length > 4 && (
                      <div className="text-center">
                        <button 
                          className="btn btn-ghost btn-sm"
                          onClick={() => setShowAllDrafts(true)}
                        >
                          +{mockDraftFiles.length - 4}개 더보기
                        </button>
                      </div>
                    )}
                  </div>
                  
                  {userRole === "designer" && (
                    <div className="mt-4 p-4 border-2 border-dashed border-primary/30 rounded-lg bg-primary/5">
                      <div className="flex items-center justify-between mb-3">
                        <h5 className="text-sm font-medium flex items-center space-x-2">
                          <span>📎</span>
                          <span>새 초안 업로드</span>
                        </h5>
                      </div>
                      <div className="space-y-3">
                        <input 
                          type="text" 
                          placeholder="작업물 이름 (예: 로고 초안 V3)" 
                          className="input input-sm input-bordered w-full"
                          value={uploadMetadata.draft.title}
                          onChange={(e) => setUploadMetadata(prev => ({
                            ...prev,
                            draft: { ...prev.draft, title: e.target.value }
                          }))}
                        />
                        <textarea 
                          placeholder="작업물 설명 (예: 색상 톤을 조정하고 폰트를 변경한 버전)" 
                          className="textarea textarea-sm textarea-bordered w-full h-16"
                          value={uploadMetadata.draft.description}
                          onChange={(e) => setUploadMetadata(prev => ({
                            ...prev,
                            draft: { ...prev.draft, description: e.target.value }
                          }))}
                        />
                        <div className="flex space-x-2">
                          <input
                            type="file"
                            id="draft-file-input"
                            className="hidden"
                            multiple
                            accept="image/*,.pdf,.ai,.psd"
                            onChange={handleFileSelect('draft')}
                          />
                          <button 
                            className="btn btn-primary btn-sm"
                            onClick={() => document.getElementById('draft-file-input')?.click()}
                          >
                            <span>📁</span>
                            파일 선택
                            {draftFiles.length > 0 && ` (${draftFiles.length}개)`}
                          </button>
                          <button 
                            className="btn btn-ghost btn-sm"
                            onClick={() => handleUpload('draft', uploadMetadata.draft.title, uploadMetadata.draft.description, uploadMetadata.draft.fileType)}
                            disabled={uploadingStage === 'draft'}
                          >
                            {uploadingStage === 'draft' ? (
                              <>
                                <span className="loading loading-spinner loading-sm"></span>
                                업로드 중...
                              </>
                            ) : (
                              '업로드'
                            )}
                          </button>
                        </div>
                        
                        {/* 선택된 파일 미리보기 */}
                        {draftFiles.length > 0 && (
                          <div className="mt-3 p-3 bg-base-200 rounded">
                            <p className="text-sm font-medium mb-2">선택된 파일:</p>
                            <div className="space-y-1">
                              {draftFiles.map((file, index) => (
                                <div key={index} className="flex items-center space-x-2 text-sm">
                                  <span>📄</span>
                                  <span className="truncate">{file.name}</span>
                                  <span className="text-xs text-base-content/60">
                                    ({Math.round(file.size / 1024)}KB)
                                  </span>
                                </div>
                              ))}
                            </div>
                          </div>
                        )}
                      </div>
                    </div>
                  )}
                  
                  {userRole === "client" && (
                    <div className="mt-4 p-4 border-2 border-dashed border-accent/30 rounded-lg bg-accent/5">
                      <div className="flex items-center justify-between mb-3">
                        <h5 className="text-sm font-medium flex items-center space-x-2">
                          <span>💬</span>
                          <span>피드백 남기기</span>
                        </h5>
                      </div>
                      <div className="space-y-3">
                        <div className="flex items-center space-x-4">
                          <label className="cursor-pointer label flex items-center space-x-2">
                            <input type="radio" name="feedback-type" className="radio radio-success radio-sm" />
                            <span className="text-sm">승인</span>
                          </label>
                          <label className="cursor-pointer label flex items-center space-x-2">
                            <input type="radio" name="feedback-type" className="radio radio-warning radio-sm" />
                            <span className="text-sm">수정 요청</span>
                          </label>
                        </div>
                        <textarea 
                          placeholder="피드백을 입력하세요 (예: 전체적으로 만족스럽습니다. 다음 단계로 진행해주세요.)" 
                          className="textarea textarea-sm textarea-bordered w-full h-20"
                        />
                        <button className="btn btn-accent btn-sm">피드백 제출</button>
                      </div>
                    </div>
                  )}
                </div>
              </div>

              {/* 2단계: 중간 작업물 */}
              <div className="card bg-gradient-to-r from-warning/5 to-warning/10 shadow-sm">
                <div className="card-body">
                  <div className="flex items-center space-x-3 mb-6">
                    <div className="w-8 h-8 bg-warning text-warning-content rounded-full flex items-center justify-center font-bold">2</div>
                    <div>
                      <h4 className="text-lg font-semibold">중간 작업물</h4>
                      <p className="text-sm text-base-content/70">2024.01.25 - 2024.02.05</p>
                    </div>
                    <div className="badge badge-warning">진행중</div>
                  </div>
                  
                  {/* 중간 작업물 갤러리 */}
                  <div className="space-y-4">
                    <div className="flex items-center justify-between">
                      <span className="text-sm font-medium">중간 작업물: {mockIntermediateFiles.length}개</span>
                      <button 
                        className="btn btn-ghost btn-xs"
                        onClick={() => setShowAllIntermediate(!showAllIntermediate)}
                      >
                        {showAllIntermediate ? '접기' : '전체보기'} 
                        <span className="ml-1">{showAllIntermediate ? '▲' : '▼'}</span>
                      </button>
                    </div>
                    
                    {/* 유형별 필터 탭 */}
                    <div className="flex space-x-2 overflow-x-auto">
                      <div className="badge badge-outline">전체 {mockIntermediateFiles.length}</div>
                      <div className="badge badge-outline">명함 {mockIntermediateFiles.filter(f => f.type === '명함').length}</div>
                      <div className="badge badge-outline">레터헤드 {mockIntermediateFiles.filter(f => f.type === '레터헤드').length}</div>
                      <div className="badge badge-outline">브로셔 {mockIntermediateFiles.filter(f => f.type === '브로셔').length}</div>
                    </div>
                    
                    <div className={`grid ${showAllIntermediate ? 'grid-cols-2 md:grid-cols-4 lg:grid-cols-6' : 'grid-cols-3 md:grid-cols-6'} gap-3`}>
                      {(showAllIntermediate ? mockIntermediateFiles : mockIntermediateFiles.slice(0, 6)).map((file) => (
                        <div key={file.id} className="bg-base-100 p-2 rounded-lg hover:shadow-md transition-shadow">
                          <div className="relative">
                            {file.preview ? (
                              <Image 
                                src={file.preview} 
                                alt={file.name}
                                width={150}
                                height={showAllIntermediate ? 80 : 96}
                                className={`w-full ${showAllIntermediate ? 'h-20' : 'h-24'} object-cover rounded cursor-pointer`}
                                onClick={() => setSelectedImage({
                                  src: file.preview || '',
                                  alt: file.name,
                                  title: `${file.type} - ${file.name}`,
                                  description: `업로드일: ${file.uploadDate}, 크기: ${file.size}KB`
                                })}
                              />
                            ) : (
                              <div className={`w-full ${showAllIntermediate ? 'h-20' : 'h-24'} bg-warning/10 rounded flex items-center justify-center`}>
                                <span className="text-2xl">📄</span>
                              </div>
                            )}
                            <div className="absolute top-1 right-1 bg-warning text-warning-content text-xs px-1 rounded">
                              {file.type}
                            </div>
                          </div>
                          <div className="mt-2">
                            <p className="text-xs font-medium truncate" title={file.name}>
                              {file.name}
                            </p>
                            <div className="flex items-center justify-between mt-1">
                              <span className="text-xs text-base-content/60">{file.uploadDate}</span>
                              <span className="text-xs text-base-content/60">{file.size}KB</span>
                            </div>
                          </div>
                        </div>
                      ))}
                    </div>
                    
                    {!showAllIntermediate && mockIntermediateFiles.length > 6 && (
                      <div className="text-center">
                        <button 
                          className="btn btn-ghost btn-sm"
                          onClick={() => setShowAllIntermediate(true)}
                        >
                          +{mockIntermediateFiles.length - 6}개 더보기
                        </button>
                      </div>
                    )}
                  </div>
                  
                  {userRole === "designer" && (
                    <div className="mt-4 p-4 border-2 border-dashed border-warning/30 rounded-lg bg-warning/5">
                      <div className="flex items-center justify-between mb-3">
                        <h5 className="text-sm font-medium flex items-center space-x-2">
                          <span>📎</span>
                          <span>중간 작업물 업로드</span>
                        </h5>
                      </div>
                      <div className="space-y-3">
                        <select 
                          className="select select-sm select-bordered w-full"
                          value={uploadMetadata.intermediate.fileType}
                          onChange={(e) => setUploadMetadata(prev => ({
                            ...prev,
                            intermediate: { ...prev.intermediate, fileType: e.target.value }
                          }))}
                        >
                          <option disabled value="general">작업물 유형을 선택하세요</option>
                          <option value="business-card">명함 디자인</option>
                          <option value="letterhead">레터헤드</option>
                          <option value="brochure">브로셔 디자인</option>
                          <option value="packaging">패키징 디자인</option>
                          <option value="other">기타</option>
                        </select>
                        <input 
                          type="text" 
                          placeholder="작업물 이름 (예: 명함 디자인 최종안)" 
                          className="input input-sm input-bordered w-full"
                          value={uploadMetadata.intermediate.title}
                          onChange={(e) => setUploadMetadata(prev => ({
                            ...prev,
                            intermediate: { ...prev.intermediate, title: e.target.value }
                          }))}
                        />
                        <textarea 
                          placeholder="작업물 설명 및 특징 (예: 양면 명함, 무광 코팅 적용)" 
                          className="textarea textarea-sm textarea-bordered w-full h-16"
                          value={uploadMetadata.intermediate.description}
                          onChange={(e) => setUploadMetadata(prev => ({
                            ...prev,
                            intermediate: { ...prev.intermediate, description: e.target.value }
                          }))}
                        />
                        <div className="flex space-x-2">
                          <input
                            type="file"
                            id="intermediate-file-input"
                            className="hidden"
                            multiple
                            accept="image/*,.pdf,.ai,.psd"
                            onChange={handleFileSelect('intermediate')}
                          />
                          <button 
                            className="btn btn-warning btn-sm"
                            onClick={() => document.getElementById('intermediate-file-input')?.click()}
                          >
                            <span>📁</span>
                            파일 선택
                            {intermediateFiles.length > 0 && ` (${intermediateFiles.length}개)`}
                          </button>
                          <button 
                            className="btn btn-ghost btn-sm"
                            onClick={() => handleUpload('intermediate', uploadMetadata.intermediate.title, uploadMetadata.intermediate.description, uploadMetadata.intermediate.fileType)}
                            disabled={uploadingStage === 'intermediate'}
                          >
                            {uploadingStage === 'intermediate' ? (
                              <>
                                <span className="loading loading-spinner loading-sm"></span>
                                업로드 중...
                              </>
                            ) : (
                              '업로드'
                            )}
                          </button>
                        </div>
                      </div>
                    </div>
                  )}
                  
                  {userRole === "client" && (
                    <div className="mt-4 p-3 bg-info/10 rounded-lg">
                      <p className="text-sm text-info-content">
                        💬 디자이너가 작업물을 업로드하면 검토 후 피드백을 남길 수 있습니다.
                      </p>
                    </div>
                  )}
                </div>
              </div>

              {/* 3단계: 최종 결과물 */}
              <div className="card bg-gradient-to-r from-neutral/5 to-neutral/10 shadow-sm">
                <div className="card-body">
                  <div className="flex items-center space-x-3 mb-6">
                    <div className="w-8 h-8 bg-neutral text-neutral-content rounded-full flex items-center justify-center font-bold">3</div>
                    <div>
                      <h4 className="text-lg font-semibold">최종 결과물</h4>
                      <p className="text-sm text-base-content/70">2024.02.10 - 2024.02.15 (예정)</p>
                    </div>
                    <div className="badge badge-neutral">대기중</div>
                  </div>
                  
                  <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
                    <div className="space-y-2">
                      <div className="bg-base-100 p-4 rounded-lg border-2 border-dashed border-neutral">
                        <div className="w-full h-48 bg-neutral/10 rounded flex items-center justify-center">
                          <div className="text-center">
                            <div className="text-4xl mb-2">📦</div>
                            <p className="text-sm font-medium">완성된 로고 패키지</p>
                            <p className="text-xs text-base-content/60">AI, PNG, SVG 파일</p>
                          </div>
                        </div>
                      </div>
                    </div>
                    
                    <div className="space-y-2">
                      <div className="bg-base-100 p-4 rounded-lg border-2 border-dashed border-neutral">
                        <div className="w-full h-48 bg-neutral/10 rounded flex items-center justify-center">
                          <div className="text-center">
                            <div className="text-4xl mb-2">📋</div>
                            <p className="text-sm font-medium">브랜드 가이드라인</p>
                            <p className="text-xs text-base-content/60">사용법 및 규정</p>
                          </div>
                        </div>
                      </div>
                    </div>
                  </div>
                  
                  {userRole === "designer" && (
                    <div className="mt-4 p-4 border-2 border-dashed border-neutral/30 rounded-lg bg-neutral/5">
                      <div className="flex items-center justify-between mb-3">
                        <h5 className="text-sm font-medium flex items-center space-x-2">
                          <span>📎</span>
                          <span>최종 결과물 업로드</span>
                        </h5>
                      </div>
                      <div className="space-y-3">
                        <select 
                          className="select select-sm select-bordered w-full"
                          value={uploadMetadata.final.fileType}
                          onChange={(e) => setUploadMetadata(prev => ({
                            ...prev,
                            final: { ...prev.final, fileType: e.target.value }
                          }))}
                        >
                          <option disabled value="general">결과물 유형을 선택하세요</option>
                          <option value="logo-package">완성된 로고 패키지</option>
                          <option value="brand-guideline">브랜드 가이드라인</option>
                          <option value="source-files">소스 파일 (AI/PSD)</option>
                          <option value="print-ready">인쇄용 파일</option>
                          <option value="web-ready">웹용 파일</option>
                          <option value="other">기타</option>
                        </select>
                        <input 
                          type="text" 
                          placeholder="결과물 이름 (예: 최종 로고 패키지 v1.0)" 
                          className="input input-sm input-bordered w-full"
                          value={uploadMetadata.final.title}
                          onChange={(e) => setUploadMetadata(prev => ({
                            ...prev,
                            final: { ...prev.final, title: e.target.value }
                          }))}
                        />
                        <textarea 
                          placeholder="결과물 설명 (예: AI, PNG, SVG 포함, 다양한 사이즈별 파일)" 
                          className="textarea textarea-sm textarea-bordered w-full h-16"
                          value={uploadMetadata.final.description}
                          onChange={(e) => setUploadMetadata(prev => ({
                            ...prev,
                            final: { ...prev.final, description: e.target.value }
                          }))}
                        />
                        <div className="flex space-x-2">
                          <input
                            type="file"
                            id="final-file-input"
                            className="hidden"
                            multiple
                            accept="image/*,.pdf,.ai,.psd,.zip"
                            onChange={handleFileSelect('final')}
                          />
                          <button 
                            className="btn btn-success btn-sm"
                            onClick={() => document.getElementById('final-file-input')?.click()}
                          >
                            <span>📁</span>
                            파일 선택
                            {finalFiles.length > 0 && ` (${finalFiles.length}개)`}
                          </button>
                          <button 
                            className="btn btn-ghost btn-sm"
                            onClick={() => handleUpload('final', uploadMetadata.final.title, uploadMetadata.final.description, uploadMetadata.final.fileType)}
                            disabled={uploadingStage === 'final'}
                          >
                            {uploadingStage === 'final' ? (
                              <>
                                <span className="loading loading-spinner loading-sm"></span>
                                업로드 중...
                              </>
                            ) : (
                              '최종 제출'
                            )}
                          </button>
                        </div>
                      </div>
                    </div>
                  )}
                  
                  <div className="mt-4 p-3 bg-info/10 rounded-lg">
                    <div className="flex items-start space-x-2">
                      <span className="text-info">ℹ️</span>
                      <p className="text-sm text-info-content">
                        {userRole === "designer" 
                          ? "중간 작업물 승인 후 최종 결과물을 업로드할 수 있습니다."
                          : "중간 작업물 승인 후 최종 결과물 제작이 시작됩니다. 예상 완료일: 2024년 2월 15일"
                        }
                      </p>
                    </div>
                  </div>
                </div>
              </div>
            </div>


            {/* 추가 파일 업로드 */}
            <div className="card bg-base-100 shadow-sm">
              <div className="card-body">
                <h4 className="font-medium mb-4">📁 추가 파일 업로드</h4>
                <FileUpload
                  onFilesUpload={handleFilesUpload}
                  onFileRemove={handleFileRemove}
                  maxFileSize={50}
                  maxFiles={20}
                  multiple={true}
                  existingFiles={[]}
                  acceptedTypes={[
                    "image/jpeg",
                    "image/png",
                    "image/gif",
                    "image/webp",
                    "application/pdf",
                    "application/vnd.adobe.illustrator",
                    "application/x-photoshop",
                    "application/zip",
                    "text/plain",
                  ]}
                />
              </div>
            </div>

            {/* 이미지 주석 기능 */}
            <div className="card bg-base-100 shadow-sm">
              <div className="card-body">
                <h4 className="font-medium mb-4 flex items-center space-x-2">
                  <span className="text-xl">🖼️</span>
                  <span>로고 초안 V2 - 주석 기능</span>
                  <div className="badge badge-primary">최신</div>
                </h4>
                
                {/* 간단한 이미지 표시 (스피너 없이) */}
                <div className="relative">
                  <Image 
                    src="https://picsum.photos/800/600?random=2" 
                    alt="로고 초안 V2"
                    width={800}
                    height={600}
                    className="w-full max-w-2xl h-auto rounded-lg border border-base-300"
                  />
                  
                  {/* 모의 주석 표시 */}
                  <div className="absolute top-4 left-4 bg-success text-success-content px-2 py-1 rounded-full text-xs font-medium">
                    ✓ 색상 승인됨
                  </div>
                  <div className="absolute bottom-4 right-4 bg-warning text-warning-content px-2 py-1 rounded-full text-xs font-medium">
                    ! 폰트 크기 조정 필요
                  </div>
                </div>
                
                <div className="mt-4 space-y-3">
                  {/* 주석 목록 */}
                  <div className="p-3 bg-success/10 border-l-4 border-success rounded">
                    <div className="flex items-start space-x-2">
                      <span className="text-success">✓</span>
                      <div>
                        <p className="text-sm font-medium">색상이 좋습니다! 이 톤을 유지해주세요.</p>
                        <p className="text-xs text-base-content/60 mt-1">클라이언트 · 해결됨</p>
                      </div>
                    </div>
                  </div>
                  
                  <div className="p-3 bg-warning/10 border-l-4 border-warning rounded">
                    <div className="flex items-start space-x-2">
                      <span className="text-warning">!</span>
                      <div>
                        <p className="text-sm font-medium">폰트 크기를 조금 더 키워주실 수 있나요?</p>
                        <p className="text-xs text-base-content/60 mt-1">클라이언트 · 검토 중</p>
                      </div>
                    </div>
                  </div>
                </div>
                
                <div className="mt-4 p-3 bg-base-200 rounded-lg">
                  <div className="flex items-start space-x-2 text-sm">
                    <span className="text-lg">💡</span>
                    <div>
                      <p className="font-medium mb-1">주석 기능 사용법</p>
                      <ul className="text-base-content/70 space-y-1">
                        <li>• 이미지를 클릭하여 주석을 추가할 수 있습니다</li>
                        <li>• {userRole === "client" ? "클라이언트는 주석 추가 및 수정이 가능합니다" : "디자이너는 주석을 확인하고 답변할 수 있습니다"}</li>
                        <li>• 주석 상태: 🔴 검토 중, 🟢 해결됨</li>
                      </ul>
                    </div>
                  </div>
                </div>
              </div>
            </div>

            {/* 상세 파일 목록 */}
            <div className="card bg-base-100 shadow-sm">
              <div className="card-body">
                <h4 className="font-medium mb-4 flex items-center justify-between">
                  <span className="flex items-center space-x-2">
                    <span className="text-xl">📋</span>
                    <span>전체 파일 목록</span>
                  </span>
                  <div className="text-sm text-base-content/60">
                    {(() => {
                      const filteredFiles = getFilteredAndSortedFiles();
                      return `${filteredFiles.length}개 파일 • ${Math.round(filteredFiles.reduce((acc, f) => acc + f.size, 0) / 1024 / 1024)}MB`;
                    })()}
                  </div>
                </h4>
                <div className="overflow-x-auto">
                  <table className="table table-sm">
                    <thead>
                      <tr>
                        <th>파일명</th>
                        <th>종류</th>
                        <th>크기</th>
                        <th>업로드일</th>
                        <th>상태</th>
                        <th>작업</th>
                      </tr>
                    </thead>
                    <tbody>
                      {getFilteredAndSortedFiles().length === 0 ? (
                        <tr>
                          <td colSpan={6} className="text-center py-8">
                            <div className="text-base-content/50">
                              <div className="text-4xl mb-2">🔍</div>
                              <p className="font-medium">검색 결과가 없습니다</p>
                              <p className="text-sm">다른 검색어를 입력하거나 필터를 변경해보세요</p>
                            </div>
                          </td>
                        </tr>
                      ) : (
                        getFilteredAndSortedFiles().map((file, index) => {
                        const uploadDate = new Date(2024, 0, 15 + index * 2); // Mock dates
                        const getFileCategory = (name: string) => {
                          if (name.includes('logo_design')) return { label: '디자인 초안', color: 'badge-primary' };
                          if (name.includes('intermediate')) return { label: '중간 보고서', color: 'badge-warning' };
                          if (name.includes('guideline') || name.includes('deliverables')) return { label: '최종 결과물', color: 'badge-success' };
                          return { label: '기타', color: 'badge-neutral' };
                        };
                        const category = getFileCategory(file.name);
                        
                        return (
                          <tr key={file.id} className="hover">
                            <td>
                              <div className="flex items-center space-x-3">
                                {file.preview ? (
                                  <Image src={file.preview} alt={file.name} width={32} height={32} className="w-8 h-8 object-cover rounded" />
                                ) : (
                                  <div className="w-8 h-8 bg-base-300 rounded flex items-center justify-center text-sm">
                                    {file.type === 'application/pdf' ? '📄' : file.type.includes('zip') ? '📦' : '📁'}
                                  </div>
                                )}
                                <div className="font-medium">{file.name}</div>
                              </div>
                            </td>
                            <td>
                              <div className={`badge ${category.color} badge-sm`}>
                                {category.label}
                              </div>
                            </td>
                            <td className="text-sm">{Math.round(file.size / 1024)}KB</td>
                            <td className="text-sm">{uploadDate.toLocaleDateString()}</td>
                            <td>
                              <div className="badge badge-success badge-sm">✓ 완료</div>
                            </td>
                            <td>
                              <div className="flex space-x-1">
                                {file.preview && (
                                  <button 
                                    className="btn btn-ghost btn-xs" 
                                    title="미리보기"
                                    onClick={() => setSelectedImage({
                                      src: file.preview || '',
                                      alt: file.name,
                                      title: file.name,
                                      description: `${category.label} • ${Math.round(file.size / 1024)}KB • ${uploadDate.toLocaleDateString()}`
                                    })}
                                  >👁️</button>
                                )}
                                <button 
                                  className="btn btn-ghost btn-xs" 
                                  title="다운로드"
                                  onClick={() => handleFileDownload(file)}
                                >⬇️</button>
                                <button 
                                  className="btn btn-ghost btn-xs" 
                                  title="공유"
                                  onClick={() => handleFileShare(file)}
                                >🔗</button>
                              </div>
                            </td>
                          </tr>
                        );
                        })
                      )}
                    </tbody>
                  </table>
                </div>
              </div>
            </div>
          </div>
        );

      case "history":
        return (
          <div className="space-y-6">
            <h3 className="text-lg font-semibold">버전 히스토리</h3>

            {feedbacks.length > 0 && (
              <div className="tabs tabs-boxed">
                {feedbacks.map((feedback) => (
                  <button
                    key={feedback.id}
                    className="tab"
                    onClick={() => setActiveTab(`history-${feedback.id}`)}
                  >
                    피드백 #{feedback.id.slice(-3)}
                  </button>
                ))}
              </div>
            )}

            {activeTab.startsWith("history-") ? (
              <FeedbackVersionHistory
                feedbackId={activeTab.replace("history-", "")}
                onVersionRestore={(version) => {
                  console.log(`버전 ${version}으로 복원`);
                }}
                showActions={true}
              />
            ) : (
              <div className="text-center py-12">
                <div className="text-6xl mb-4">📜</div>
                <h3 className="text-xl font-bold mb-2">피드백을 선택하세요</h3>
                <p className="text-base-content/60">
                  위의 탭에서 피드백을 선택하면 버전 히스토리를 확인할 수
                  있습니다.
                </p>
              </div>
            )}
          </div>
        );

      default:
        return <div>탭을 선택하세요</div>;
    }
  };


  return (
    <AuthWrapper requireAuth>
      <DashboardLayout title={project.name} userRole={userRole}>
        <div className="space-y-6">
          {/* 프로젝트 헤더 */}
          <div className="card bg-base-100 shadow-sm">
            <div className="card-body">
              <div className="flex items-start justify-between">
                <div className="flex-1">
                  <h1 className="text-2xl font-bold mb-2">{project.name}</h1>
                  <p className="text-base-content/70 mb-4">
                    {project.description}
                  </p>

                  <div className="flex items-center space-x-4 text-sm">
                    <span
                      className={`badge badge-${statusInfo.color} badge-lg`}
                    >
                      {statusInfo.icon} {statusInfo.label}
                    </span>
                    <span>진행률: {progress}%</span>
                    <span>
                      마감: {new Date(project.end_date).toLocaleDateString()}
                    </span>
                  </div>
                </div>

                <div className="flex items-center space-x-2">
                  <button
                    onClick={() => router.push("/projects")}
                    className="btn btn-ghost"
                  >
                    ← 목록으로
                  </button>
                </div>
              </div>
            </div>
          </div>

          {/* 탭 네비게이션 */}
          <div className="tabs tabs-boxed justify-start">
            <button
              className={`tab tab-lg ${
                activeTab === "overview" ? "tab-active" : ""
              }`}
              onClick={() => setActiveTab("overview")}
            >
              📊 개요
            </button>
            <button
              className={`tab tab-lg ${
                activeTab === "feedback" ? "tab-active" : ""
              }`}
              onClick={() => setActiveTab("feedback")}
            >
              📝 피드백 & 수정요청 ({feedbacks.length})
            </button>
            <button
              className={`tab tab-lg ${
                activeTab === "versions" ? "tab-active" : ""
              }`}
              onClick={() => setActiveTab("versions")}
            >
              🎨 시안 버전
            </button>
            <button
              className={`tab tab-lg ${
                activeTab === "files" ? "tab-active" : ""
              }`}
              onClick={() => setActiveTab("files")}
            >
              📁 파일
            </button>
            <button
              className={`tab tab-lg ${
                activeTab === "history" ? "tab-active" : ""
              }`}
              onClick={() => setActiveTab("history")}
            >
              📜 히스토리
            </button>
          </div>

          {/* 탭 내용 */}
          {renderTabContent()}
        </div>

        {/* 이미지 미리보기 모달 */}
        {selectedImage && (
          <div className="modal modal-open">
            <div className="modal-box max-w-4xl">
              <div className="flex items-center justify-between mb-4">
                <h3 className="font-bold text-lg">{selectedImage.title}</h3>
                <button 
                  className="btn btn-ghost btn-sm"
                  onClick={() => setSelectedImage(null)}
                >
                  ✕
                </button>
              </div>
              
              <div className="flex flex-col items-center">
                <Image 
                  src={selectedImage.src} 
                  alt={selectedImage.alt}
                  width={600}
                  height={400}
                  className="max-w-full max-h-96 object-contain rounded-lg shadow-lg"
                />
                
                {selectedImage.description && (
                  <p className="text-sm text-base-content/70 mt-3 text-center">
                    {selectedImage.description}
                  </p>
                )}
                
                <div className="flex space-x-2 mt-4">
                  <button 
                    className="btn btn-primary btn-sm"
                    onClick={() => {
                      const mockFile = { name: selectedImage.title || selectedImage.alt };
                      handleFileDownload(mockFile);
                    }}
                  >
                    ⬇️ 다운로드
                  </button>
                  <button 
                    className="btn btn-ghost btn-sm"
                    onClick={() => {
                      const mockFile = { 
                        id: `preview-${Date.now()}`,
                        name: selectedImage.title || selectedImage.alt 
                      };
                      handleFileShare(mockFile);
                    }}
                  >
                    🔗 공유
                  </button>
                  <button 
                    className="btn btn-ghost btn-sm"
                    onClick={() => setSelectedImage(null)}
                  >
                    닫기
                  </button>
                </div>
              </div>
            </div>
            <div className="modal-backdrop" onClick={() => setSelectedImage(null)}>
            </div>
          </div>
        )}
      </DashboardLayout>
    </AuthWrapper>
  );
}
